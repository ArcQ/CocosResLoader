{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/ResLoaderCtrl.js","src/ResLoaderModel.js","src/ResLoaderView.js","src/resloader.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"resloader.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//LoadSceneCtrl serves as a replacement of the default preloader function (CCLoaderScene.js)\n//Scenes are used as controllers because running scenes have access to methods that the controller needs, this contradicts with MVC slightly\nvar ResLoaderModel = require('./ResLoaderModel');\nvar ResLoaderView = require('./ResLoaderView');\n\nvar ResLoaderCtrl = function(){\n    this.view = new ResLoaderView();\n    this.model = new ResLoaderModel();\n    this.delayedCb = null;\n    this.isShowAnimation = null;\n};\n\nResLoaderCtrl.prototype.loadResources = function(resources,isShowAnimation,cb){\n    //native machines don't need preload function, show layer for a few seconds instead\n    this.isShowAnimation = isShowAnimation;\n    //if it's native, we don't need to load, just callback\n    if(cc.sys.isNative){\n        cb();\n        return;\n    }\n    if(this.isShowAnimation === true){\n        this.view.delayedCb = cb;\n        this.view.startUpdate.call(this.view);\n    }\n    else{\n        this.delayedCb = cb;\n    }\n    var self = this;\n    this.model.load(this,resources,cb);\n};\n\nResLoaderCtrl.prototype.resLoadUpdate = function(percentLoaded){\n    this.view.percentResLoaded = percentLoaded;\n};\n\nResLoaderCtrl.prototype.finishLoad= function(){\n    if(this.isShowAnimation === true){\n        //delay the callback until after the loadingAnimation loads to 100 through update();\n        this.view.percentResLoaded = 100;\n    }\n    else{\n        this.delayedCb();\n    }\n}\n\nmodule.exports = ResLoaderCtrl;\n\n\n\n\n\n\n\n","//LoadSceneCtrl serves as a replacement of the default preloader function (CCLoaderScene.js)\n//Scenes are used as controllers because running scenes have access to methods that the controller needs, this contradicts with MVC slightly\nvar ResLoaderModel = cc.Scene.extend({\n    percentResLoaded:0,\n    delayedCb:null\n});\n\nResLoaderModel.prototype.load = function(ctrl,resources){\n    var self = this;\n    cc.loader.load(\n        resources,\n        //callback from actual loading process\n        function (result, count, loadedCount) {\n            var percentLoaded = (loadedCount / count * 100) | 0;\n            percentLoaded = Math.min(percentLoaded, 100);\n            ctrl.resLoadUpdate(percentLoaded);\n        },\n        //tell ctrl resources are loaded\n        function () {\n            ctrl.finishLoad();\n        }\n    );\n};\n\nmodule.exports = ResLoaderModel;\n\n\n\n\n\n\n\n\n","//ResLoaderView is a scene that gets added\n//you can add customer layers to this making sure you pass a loading bar to this class\nvar ResLoaderView = cc.Scene.extend({\n    percentResLoaded:0,\n    percentBarLoaded:0,\n    loadingBar:null,\n    delayedCb:null,\n    onEnter: function () {\n        this._super();\n    },\n    update: function(dt){\n        this.setLoadingBarPercentage.call(this,dt);\n    }\n});\n\nResLoaderView.prototype.startUpdate = function(){\n    this.scheduleUpdate();\n};\n\nResLoaderView.prototype.skipLoad = function(cb){\n    this.scheduleOnce(\n        function(){\n            cb();\n        },\n        3.0,\n        \"key\"\n    );\n}\n\nResLoaderView.prototype.setLoadingBarPercentage = function(dt) {\n    if (this.percentBarLoaded < this.percentResLoaded){\n        this.percentBarLoaded = this.percentBarLoaded +dt/2*100;\n        this.loadingBar.setPercentage(this.percentBarLoaded);\n    }\n\n    if(this.percentBarLoaded >= 100){\n        this.unscheduleUpdate();\n        this.delayedCb();\n    }\n};\n\nmodule.exports = ResLoaderView;\n\n\n\n\n\n\n\n\n\n","//LoadSceneCtrl serves as a replacement of the default preloader function (CCLoaderScene.js)\n//Scenes are used as controllers because running scenes have access to methods that the controller needs, this contradicts with MVC slightly\nvar ResLoaderCtrl = require('./ResLoaderCtrl');\n\nwindow.ResLoader = function(){\n    this.ctrl = new ResLoaderCtrl();\n};\n\n//After every load, store a defined key so you can check and make sure you don't have to load again\n//Check via:\n//\n//  if(LoadSceneCtrl.indexOf(key)==-1){\n//      loadSceneCtrl.loadSceneCtrl.loadResources.call(..);\n//      LoadSceneCtrl.addKey(key);\n//  }\n\nResLoader.loadedKeysArr = [];\n\nResLoader.addKey = function(key){\n    ResLoader.loadedKeysArr[ResLoader.loadedKeysArr.length] = key;\n};\n\nResLoader.isKeyAdded = function(key){\n    for( var i = 0; i < ResLoader.loadedKeysArr.length; i++ ) {\n        if (key == ResLoader.loadedKeysArr[i]){\n            return true;\n        }\n    }\n    return false;\n};\n\nResLoader.prototype.loadResources = function(key,resources,isShowAnimation,cb){\n    if(!ResLoader.isKeyAdded(key)){\n\n        ResLoader.addKey(key);\n        this.ctrl.loadResources.call(this.ctrl,resources,isShowAnimation,cb);\n        \n    }\n};\n\nmodule.exports = ResLoader;\n\n\n\n\n\n\n\n"]}